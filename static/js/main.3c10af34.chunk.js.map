{"version":3,"sources":["Hello.js","UserList.js","CreateUser.js","App.js","serviceWorker.js","index.js"],"names":["Hello","name","color","isSpecial","style","defaultProps","User","user","onRemove","onToggle","username","email","id","active","cursor","onClick","UserList","users","map","key","CreateUser","onChange","onCreate","placeholder","value","App","useState","inputs","setInputs","setUsers","nextId","useRef","e","target","current","concat","console","log","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3c10af34.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Hello({name, color, isSpecial}) {\r\n  return (\r\n    <div style={{color}}>\r\n      {isSpecial ? <b>*</b> : null}\r\n      {/* {isSpecial && <b>*</b>} */} \r\n      안녕하세요 {name}\r\n    </div>\r\n  );\r\n}\r\n\r\nHello.defaultProps = {\r\n  name: \"unknown\"\r\n}\r\n\r\nexport default Hello;","import React from 'react';\r\n\r\nfunction User({ user, onRemove, onToggle }) {\r\n  const { username, email, id, active } = user;\r\n\r\n  return (\r\n    <div>\r\n      <b \r\n        style={{\r\n          color: active ? 'green': 'black',\r\n          cursor: 'pointer'\r\n        }}\r\n        onClick = {() => onToggle(id)}\r\n      >\r\n        {username}\r\n      </b> \r\n      <span>({email})</span>\r\n      <button onClick={() => onRemove(id)}>삭제</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction UserList({ users, onRemove, onToggle }) {\r\n  return(\r\n    <div>\r\n      {\r\n        users.map(\r\n          user => (\r\n            <User \r\n              user={user} \r\n              key={user.id} \r\n              onRemove={onRemove}\r\n              onToggle={onToggle}\r\n            />\r\n          )\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserList;","import React from 'react';\r\n\r\nfunction CreateUser({ username, email, onChange, onCreate }) {\r\n  return (\r\n    <div>\r\n      <input \r\n        name=\"username\" \r\n        placeholder=\"계정명\" \r\n        onChange={onChange}\r\n        value={username}\r\n      />\r\n      <input \r\n        name=\"email\" \r\n        placeholder=\"이메일\" \r\n        onChange={onChange}\r\n        value={email}\r\n      />\r\n      <button onClick={onCreate}>등록</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateUser;","import React, {useRef, Fragment, useState} from 'react';\nimport Hello from './Hello';\nimport Wrapper from './Wrapper';\nimport Counter from './Counter';\nimport InputSample from './InputSample';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction App() {\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: ''\n  });\n  const { username, email } = inputs;\n\n  const onChange = e => {\n    const { name, value } = e.target;\n    setInputs({\n      ...inputs,\n      [name]: value\n    });\n  }\n\n  const [users, setUsers] = useState([\n    {\n      id: 1,\n      username: 'mink',\n      email: 'mink@gmail.com',\n      active: true\n    }, \n    {\n      id: 2,\n      username: 'juk',\n      email: 'juk@gmail.com',\n      active: false\n    },\n    {\n      id: 3,\n      username: 'tester',\n      email: 'tester@gmail.com',\n      active: false\n    }\n  ]);\n\n  const nextId = useRef(4);\n\n  const onCreate = () => {\n    const user = {\n      id: nextId.current,\n      username,\n      email\n    };\n\n    // 배열 항목추가\n    // setUsers([...users, user]);  // spread 연산자\n    setUsers(users.concat(user));   // concat()\n\n    setInputs({\n      username: '',\n      email: ''\n    });\n    console.log(nextId.current);\n    nextId.current += 1;\n  }\n\n  const onRemove = id => {\n    setUsers(users.filter(user => user.id !== id));\n  }\n\n  const onToggle = id => {\n    setUsers(users.map(\n      user => user.id === id\n        ? { ...user, active: !user.active }\n        : user\n    ));\n  }\n\n  return (\n    <Fragment>\n      <CreateUser \n        username={username}\n        email={email}\n        onChange={onChange}\n        onCreate={onCreate}\n      />\n      <UserList users={users} onRemove={onRemove} onToggle={onToggle} />\n    </Fragment>\n\n    // <InputSample />\n\n    // <Counter />\n    \n    // <Wrapper>\n    //   <Hello name=\"react\" color=\"red\" isSpecial />\n    //   <Hello color=\"blue\" />\n    // </Wrapper>\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}